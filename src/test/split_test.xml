<?xml version="1.0"?>

<project name="split_test" basedir="." default="test1" xmlns:a="antlib:ise.antelope.tasks">
   <description>
        build file to test the SplitTask task
   </description>

   <target name="setUp">
      <property name="out_dir" value="${java.io.tmpdir}/splittest"/>
   </target>

   <target name="test1" depends="clean">
      <property name="prop1" value="ABCDE"/>
      <a:split property="prop1" bytes="1" outputdir="${out_dir}"/>
      <a:fileutil file="${out_dir}" property="file_count">
         <filecount/>
      </a:fileutil>
      <a:assert message="Expected 5 files, got ${file_count}">
         <bool>
            <mathequals arg1="5" arg2="${file_count}"/>
         </bool>
      </a:assert>
   </target>

   <!--
      Test splitting a file by splitting ant.jar, then reassembling it with concat.
   -->
   <target name="test2" depends="clean">
      <!-- make sure ant.jar is available -->
      <property name="ant.jar" value="${ant.library.dir}/ant.jar"/>
      <available property="ant.jar.available" file="${ant.jar}"/>
      
      <a:if name="ant.jar.available" value="true">
         <!-- ant.jar generally runs around 1MB in size, so split into 100000 byte pieces -->
         <a:unset name="piece_size"/>
         <property name="piece_size" value="100000"/>
         <a:split file="${ant.jar}" bytes="${piece_size}" outputdir="${out_dir}" prefix="ant.jar"/>
         
         <!-- count the parts -->
         <a:fileutil file="${out_dir}" property="file_count">
            <filecount/>
         </a:fileutil>
         
         <!-- calculate how many parts there should be -->
         <a:fileutil file="${ant.jar}" property="ant_size">
            <a:filelength/>
         </a:fileutil>
         <a:math result="split_size">
            <op op="ceil">
               <op op="/">
                  <num value="${ant_size}"/>
                  <num value="${piece_size}"/>
               </op>
            </op>
         </a:math>
         
         <!-- make sure there are the right number of parts -->
         <a:assert message="Expected ${split_size} files, got ${file_count}">
            <bool>
               <mathequals arg1="${split_size}" arg2="${file_count}"/>
            </bool>
         </a:assert>

         <!-- sort the filenames of the parts so concat puts them together in
         the right order-->
         <a:fileutil file="${out_dir}" property="file_list">
            <listfiles includepath="no"/>
         </a:fileutil>
         <a:stringutil string="${file_list}" property="file_list">
            <sort/>
         </a:stringutil>
         
         <!-- put them back together -->
         <concat destfile="${out_dir}/ant.jar" binary="true">
            <filelist dir="${out_dir}" files="${file_list}"/>
         </concat>

         <!-- make sure the new file is the identical to the original -->
         <a:assert message="concat did not produce identical file">
            <bool>
               <filesmatch file1="${ant.jar}" file2="${out_dir}/ant.jar"/>
            </bool>
         </a:assert>
      </a:if>
   </target>

   <!--
      Same as test 2, but using a modifier.
   -->
   <target name="test3" depends="clean">
      <!-- make sure ant.jar is available -->
      <property name="ant.jar" value="${ant.library.dir}/ant.jar"/>
      <available property="ant.jar.available" file="${ant.jar}"/>
      
      <a:if name="ant.jar.available" value="true">
         <!-- ant.jar generally runs around 1MB in size, so split into 100k byte pieces -->
         <a:unset name="piece_size"/>
         <property name="piece_size" value="100k"/>
         <a:split file="${ant.jar}" size="${piece_size}" outputdir="${out_dir}" prefix="ant.jar"/>
         
         <!-- count the parts -->
         <a:fileutil file="${out_dir}" property="file_count">
            <filecount/>
         </a:fileutil>
         
         <!-- calculate how many parts there should be -->
         <a:fileutil file="${ant.jar}" property="ant_size">
            <filelength/>
         </a:fileutil>
         <a:math result="split_size">
            <op op="ceil">
               <op op="/">
                  <num value="${ant_size}"/>
                  <op op="*">
                     <num value="100"/>
                     <num value="1024"/>
                  </op>
               </op>
            </op>
         </a:math>
         
         <!-- make sure there are the right number of parts -->
         <a:assert message="Expected ${split_size} files, got ${file_count}">
            <bool>
               <mathequals arg1="${split_size}" arg2="${file_count}"/>
            </bool>
         </a:assert>

         <!-- sort the filenames of the parts so concat puts them together in
         the right order-->
         <a:fileutil file="${out_dir}" property="file_list">
            <listfiles includepath="no"/>
         </a:fileutil>
         <a:stringutil string="${file_list}" property="file_list">
            <sort/>
         </a:stringutil>
         
         <!-- put them back together -->
         <concat destfile="${out_dir}/ant.jar" binary="true">
            <filelist dir="${out_dir}" files="${file_list}"/>
         </concat>

         <!-- make sure the new file is the identical to the original -->
         <a:assert message="concat did not produce identical file">
            <bool>
               <filesmatch file1="${ant.jar}" file2="${out_dir}/ant.jar"/>
            </bool>
         </a:assert>
      </a:if>
   </target>
   
   <!--
      Similar to test 2, but using lines.
   -->
   <target name="test4" depends="clean">
      <!-- make sure Ant's build.xml is available -->
      <property name="ant.build.xml" value="${ant.home}/build.xml"/>
      <available property="ant.build.xml.available" file="${ant.build.xml}"/>
      
      <a:if name="ant.build.xml.available" value="true">
         <!-- Ant's build.xml generally runs around 1700 lines, use 100 lines
         per file -->
         <a:unset name="piece_size"/>
         <property name="piece_size" value="100"/>
         <a:split file="${ant.build.xml}" lines="${piece_size}" outputdir="${out_dir}" prefix="ant.build.xml"/>
         
         <!-- count the parts -->
         <a:fileutil file="${out_dir}" property="file_count">
            <filecount/>
         </a:fileutil>
         
         <!-- calculate how many parts there should be -->
         <a:fileutil file="${ant.build.xml}" property="line_count">
            <linecount/>
         </a:fileutil>
         <a:math result="split_size">
            <op op="ceil">
               <op op="/">
                  <num value="${line_count}"/>
                  <num value="${piece_size}"/>
               </op>
            </op>
         </a:math>
         
         <!-- make sure there are the right number of parts -->
         <a:assert message="Expected ${split_size} files, got ${file_count}">
            <bool>
               <mathequals arg1="${split_size}" arg2="${file_count}"/>
            </bool>
         </a:assert>

         <!-- sort the filenames of the parts so concat puts them together in
         the right order-->
         <a:fileutil file="${out_dir}" property="file_list">
            <listfiles includepath="no"/>
         </a:fileutil>
         <a:stringutil string="${file_list}" property="file_list">
            <sort/>
         </a:stringutil>
         
         <!-- put them back together -->
         <concat destfile="${out_dir}/ant.build.xml">
            <filelist dir="${out_dir}" files="${file_list}"/>
         </concat>

         <!-- make sure the new file is similar to the original. It may be
         different since the line separator used in the original may not be
         the same as the new one. Line count should be the same. -->
         <a:fileutil file="${out_dir}/ant.build.xml" property="new_line_count">
            <linecount/>
         </a:fileutil>
         <a:assert message="concat did not produce similar file">
            <bool>
               <mathequals arg1="${line_count}" arg2="${new_line_count}"/>
            </bool>
         </a:assert>
         
         <!-- the original and the new should have the same number of bytes,
         plus or minus the line count (that is, there could be an extra byte
         per line in either the original or the new if DOS line enders were 
         used in one and Unix/Mac line enders in the other) -->
         <a:fileutil file="${ant.build.xml}" property="original_length">
            <filelength/>
         </a:fileutil>
         <a:fileutil file="${out_dir}/ant.build.xml" property="new_length">
            <filelength/>
         </a:fileutil>
         <a:math result="difference">
            <op op="abs">
               <op op="-">
                  <num value="${original_length}"/>
                  <num value="${new_length}"/>
               </op>
            </op>
         </a:math>
         <a:assert message="File size difference is outside of tolerance.">
            <bool>
               <or>
                  <islessthan arg1="${difference}" arg2="${line_count}"/>
                  <mathequals arg1="${difference}" arg2="${line_count}"/>
               </or>
            </bool>
         </a:assert>
         
      </a:if>
   </target>
   
   <target name="clean">
      <delete dir="${out_dir}"/>
   </target>

   <!--
   <target name="tearDown" depends="clean"/>
   -->
</project>
